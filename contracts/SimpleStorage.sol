// SPDX-License-Identifier: MIT
pragma solidity >=0.4.21 <0.7.0;
import "./Roles.sol";
import "./DistributorRole.sol";
import "./ManufacturerRole.sol";
import "./PatientRole.sol";
import "./PharmacistRole.sol";



contract SimpleStorage is PharmacistRole, PatientRole, ManufacturerRole, DistributorRole  {

  //debugging functions

  function checker(address _add) public {
       _addManufacturer(_add);
  }


  //basic functions




    function append(string memory a, string memory b) internal pure returns (string memory s) {

    return string(abi.encodePacked(a, b));

}





  


  
  mapping (uint => Medicine) medicines;
  mapping (uint => string ) medicinehistory ; 

  address owner;

  // Define a variable called 'upc' for Universal Product Code (UPC)
  uint  upc;

  // Define a variable called 'sku' for Stock Keeping Unit (SKU)
  uint  sku;

  //manufacturer events
  event Made(uint upc);
  event Packed(uint upc);
  event ForSale(uint upc);
  event Soldtodistributor(uint upc);
  event shippedbymanufacturer(uint upc);
  //distributor events
  event recievedDistributor(uint upc);
  event soldtoPharma(uint upc);
  event shippedtoPharma(uint upc);
  //pharma events
  event recievedpharma(uint upc);
  event soldtopatient(uint upc);
  event shippedtopatient(uint upc);
  //Patientt event 
  event Purchased(uint upc);

    // Define enum 'State' with the following values:
  enum State 
  { 
    //manufacturer states
    Made,       // 0
    Packed,     // 1
    ForSale,    // 2
    Soldtodistributor, //3
    shippedbymanufacturer,//4
    //distributor states
    RecievedDistributor, //5
    SoldtoPharma, //6
    ShippedtoPharma,  //7
    //Pharmacist
    RecievedPharma, //8
    SoldtoPatient , //9
    ShippedtoPatient //10



  }

   struct Medicine {
    uint    sku;  // Stock Keeping Unit (SKU)
    uint    upc; // Universal Product Code (UPC), generated by the Manufacturer, goes on the package, can be verified by the Patient
    address ownerID;  // Metamask-Ethereum address of the current owner as the medicine moves through 8 stages
    address originManufacturerID; // Metamask-Ethereum address of the Manufacturer
    string  originFactoryName; // Manufacturer Name
    string  originFactoryInformation;  // Manufacturer Information
    string  originFactoryLatitude; // Factory Latitude
    string  originFactoryLongitude;  // Factory Longitude
    uint    medicineID;  // Product ID potentially a combination of upc + sku
    string  medicineNotes; // Product Notes
    uint    medicinePrice; // Product Price
    State   medicineState;  // Product State as represented in the enum above
    
    address distributorID;  // Metamask-Ethereum address of the Distributor
    address pharmacistID; // Metamask-Ethereum address of the Pharmacist
    address patientID; // Metamask-Ethereum address of the Patient
    string DistName;
    string PharamaName;
    string  DistLatitude; // Factory Latitude
    string  DistLongitude;  // Factory Longitude
    string  PharmaLatitude; // Factory Latitude
    string  PharmaLongitude;  // Factory Longitude
  }


  function makeMedicine(uint _upc, address _originManufacturerID, string memory _originFactoryName, string memory _originFactoryInformation, string  memory _originFactoryLatitude, string  memory _originFactoryLongitude, string  memory _medicineNotes, string memory _history) public onlyManufacturer {
    // Add the new medicine as part of medicines
    Medicine memory temp_medicine = Medicine({
      sku:sku + 1,
      upc:_upc,
      ownerID:_originManufacturerID,
      originManufacturerID:_originManufacturerID,
      originFactoryName:_originFactoryName,
      originFactoryInformation:_originFactoryInformation,
      originFactoryLatitude:_originFactoryLatitude,
      originFactoryLongitude:_originFactoryLongitude,
      medicineID:sku+_upc,
      medicineNotes:_medicineNotes,
      medicineState:State.Made,
      medicinePrice:0,
      distributorID:address(0),
      pharmacistID:address(0),
      patientID:address(0),
      DistName: " ",
      PharamaName :" ",
      DistLongitude : " ",
      DistLatitude : " ",
      PharmaLatitude : " ",
      PharmaLongitude  : " "

      });


    //string storage initial_history="This med is made by date will be passed by frontend" ;
    medicines[_upc] = temp_medicine;
    medicinehistory[_upc]  =_history;

// uint    sku;  // Stock Keeping Unit (SKU)
//     uint    upc; // Universal Product Code (UPC), generated by the Manufacturer, goes on the package, can be verified by the Patient
//     address ownerID;  // Metamask-Ethereum address of the current owner as the medicine moves through 8 stages
//     address originManufacturerID; // Metamask-Ethereum address of the Manufacturer
//     string  originFactoryName; // Manufacturer Name
//     string  originFactoryInformation;  // Manufacturer Information
//     string  originFactoryLatitude; // Factory Latitude
//     string  originFactoryLongitude;  // Factory Longitude
//     uint    medicineID;  // Product ID potentially a combination of upc + sku
//     string  medicineNotes; // Product Notes
//     uint    medicinePrice; // Product Price
//     State   medicineState;  // Product State as represented in the enum above
//     address distributorID;  // Metamask-Ethereum address of the Distributor
//     address pharmacistID; // Metamask-Ethereum address of the Pharmacist
//     address patientID; // Metamask-Ethereum address of the Patient




    // Increment sku
    sku = sku + 1;
    // Emit the appropriate event

     
  }
  // function makeMedicine(uint _upc,uint _price ,string memory _name) public {
  //     Medicine memory temp_medicine = Medicine({
  //         upc : _upc,
  //         price : _price,
  //         name : _name
  //     });
  //     medicines[_upc] = temp_medicine;

  // }

  //manufacturer sub events

  function packMedicine(uint _upc,string memory _history) public {
  // // Call modifier to check if upc has passed previous supply chain stage
  // Made(_upc);
  // Call modifier to verify caller of this function
  
    // Update the appropriate fields
    medicines[_upc].medicineState = State.Packed;
    // string memory prevhis = medicinehistory[_upc];
    //string  memory t1= concatenate(prevhis,_history);
     string memory prevhis = medicinehistory[_upc];
     string memory temp =  append(prevhis,_history);
     medicinehistory[_upc]= temp;



   // string memory history = medicinehistory[_upc];
    //history = history + " packed by manufacturer on date____";
    //medicinehistory[_upc] = history;
    // Emit the appropriate event
    emit Packed(_upc);
  }

   function forSale_bymanuf(uint _upc,string memory _history) public {
  // // Call modifier to check if upc has passed previous supply chain stage
  // Made(_upc);
  // Call modifier to verify caller of this function
  
    // Update the appropriate fields
    medicines[_upc].medicineState = State.ForSale;
   // string memory history = medicinehistory[_upc];
    //history = history + " packed by manufacturer on date____";
    //medicinehistory[_upc] = history;
    
    string memory prevhis = medicinehistory[_upc];
     string memory temp =  append(prevhis,_history);
     medicinehistory[_upc]= temp;
    // Emit the appropriate event

    emit ForSale(_upc);
  }

   function soldToDistributor(uint _upc,string memory _history) public {
  // // Call modifier to check if upc has passed previous supply chain stage
  // Made(_upc);
  // Call modifier to verify caller of this function
  
    // Update the appropriate fields
    medicines[_upc].medicineState = State.Soldtodistributor;
   // string memory history = medicinehistory[_upc];
    //history = history + " packed by manufacturer on date____";
    //medicinehistory[_upc] = history;
    string memory prevhis = medicinehistory[_upc];
     string memory temp =  append(prevhis,_history);
     medicinehistory[_upc]= temp;
    // Emit the appropriate event
    emit Soldtodistributor(_upc);
  }




 function shippedByManufacturer(uint _upc,string memory _history) public {
  // // Call modifier to check if upc has passed previous supply chain stage
  // Made(_upc);
  // Call modifier to verify caller of this function
  
    // Update the appropriate fields
    medicines[_upc].medicineState = State.shippedbymanufacturer;
   // string memory history = medicinehistory[_upc];
    //history = history + " packed by manufacturer on date____";
    //medicinehistory[_upc] = history;
    // Emit the appropriate event
    string memory prevhis = medicinehistory[_upc];
     string memory temp =  append(prevhis,_history);
     medicinehistory[_upc]= temp;
    emit shippedbymanufacturer(_upc);
  }

  //distributor controlled functions

  function RecievedDistributor(uint _upc,string memory _name,string memory _long,string memory _lat,address _address,string memory _history) public {
  // // Call modifier to check if upc has passed previous supply chain stage
  // Made(_upc);
  // Call modifier to verify caller of this function
  
    // Update the appropriate fields
      medicines[_upc].medicineState = State.RecievedDistributor;
      medicines[_upc].DistName = _name;
      medicines[_upc].DistLongitude = _long;
      medicines[_upc].DistLatitude = _lat;
      medicines[_upc].distributorID = _address;
   // string memory history = medicinehistory[_upc];
    //history = history + " packed by manufacturer on date____";
    //medicinehistory[_upc] = history;
    string memory prevhis = medicinehistory[_upc];
     string memory temp =  append(prevhis,_history);
     medicinehistory[_upc]= temp;
    // Emit the appropriate event
    emit recievedDistributor(_upc);
  }
  function SoldtoPharma(uint _upc , string memory _history) public {
  // // Call modifier to check if upc has passed previous supply chain stage
  // Made(_upc);
  // Call modifier to verify caller of this function
  
    // Update the appropriate fields
    medicines[_upc].medicineState = State.SoldtoPharma;
   // string memory history = medicinehistory[_upc];
    //history = history + " packed by manufacturer on date____";
    //medicinehistory[_upc] = history;
    string memory prevhis = medicinehistory[_upc];
     string memory temp =  append(prevhis,_history);
     medicinehistory[_upc]= temp;
    // Emit the appropriate event
    emit soldtoPharma(_upc);
  }
  function ShippedtoPharma(uint _upc, string memory _history) public {
  // // Call modifier to check if upc has passed previous supply chain stage
  // Made(_upc);
  // Call modifier to verify caller of this function
  
    // Update the appropriate fields
    medicines[_upc].medicineState = State.ShippedtoPharma;
   // string memory history = medicinehistory[_upc];
    //history = history + " packed by manufacturer on date____";
    //medicinehistory[_upc] = history;
    string memory prevhis = medicinehistory[_upc];
     string memory temp =  append(prevhis,_history);
     medicinehistory[_upc]= temp;
    // Emit the appropriate event
    emit shippedtoPharma(_upc);
  }


  //Pharmacist functions 

  function Recieved_Pharma(uint _upc,string memory _name,string memory _long,string memory _lat,address _address,string memory _history) public {
  // // Call modifier to check if upc has passed previous supply chain stage
  // Made(_upc);
  // Call modifier to verify caller of this function
  
    // Update the appropriate fields
    medicines[_upc].medicineState = State.RecievedPharma;
    medicines[_upc].PharamaName = _name;
      medicines[_upc].PharmaLongitude= _long;
      medicines[_upc].PharmaLatitude = _lat;
      medicines[_upc].pharmacistID = _address;
   // string memory history = medicinehistory[_upc];
    //history = history + " packed by manufacturer on date____";
    //medicinehistory[_upc] = history;
     string memory prevhis = medicinehistory[_upc];
     string memory temp =  append(prevhis,_history);
     medicinehistory[_upc]= temp;
    
    // Emit the appropriate event
    emit recievedpharma(_upc);
  }
  function Sold_to_Patient(uint _upc,string memory _history) public {
  // // Call modifier to check if upc has passed previous supply chain stage
  // Made(_upc);
  // Call modifier to verify caller of this function
  
    // Update the appropriate fields
    medicines[_upc].medicineState = State.SoldtoPatient;
   // string memory history = medicinehistory[_upc];
    //history = history + " packed by manufacturer on date____";
    //medicinehistory[_upc] = history;
     string memory prevhis = medicinehistory[_upc];
     string memory temp =  append(prevhis,_history);
     medicinehistory[_upc]= temp;
    // Emit the appropriate event
    emit soldtopatient(_upc);
  }
  function Shipped_to_Patient(uint _upc,string memory _history) public {
  // // Call modifier to check if upc has passed previous supply chain stage
  // Made(_upc);
  // Call modifier to verify caller of this function
  
    // Update the appropriate fields
    medicines[_upc].medicineState = State.ShippedtoPatient;
   // string memory history = medicinehistory[_upc];
    //history = history + " packed by manufacturer on date____";
    //medicinehistory[_upc] = history;
     string memory prevhis = medicinehistory[_upc];
     string memory temp =  append(prevhis,_history);
     medicinehistory[_upc]= temp;
    // Emit the appropriate event
    emit shippedtopatient(_upc);
  }



  function fetchstate(uint _upc) public view returns (State _medicineState,string memory _history){
    return (
      medicines[_upc].medicineState,
      medicinehistory[_upc]
      );
  }

  function fetchMedicine(uint _upc) public view returns (uint upc_ , address ownerid , string memory manufacturername, string memory Latitude , string memory Longitude,string memory factoryinfo , string memory notes){
    return(
          _upc,
          medicines[_upc].ownerID,
          medicines[_upc].originFactoryName,
          medicines[_upc].originFactoryLatitude,
          medicines[_upc].originFactoryLongitude,
          medicines[_upc].originFactoryInformation,
          medicines[_upc].medicineNotes
    );
  }

}
